#a. Which vendors have the most trips, and what is the total revenue generated by that vendor?

from mrjob.job import MRJob
from mrjob.step import MRStep

class VendorTripsRevenue(MRJob):

    def steps(self):
        return [
            MRStep(mapper=self.mapper_get_trips_revenue, reducer=self.reducer_sum_trips_revenue), #MapReduce: 1st step
            MRStep(reducer=self.reducer_find_max_revenue_vendor) #MapReduce: 2nd step
        ]

    def mapper_get_trips_revenue(self, _, line):
        """Mapper to extract vendor_id and revenue from each line."""
        if not line.startswith('VendorID'):  # Skip header line
            fields = line.split(',')
            try:
                vendor_id = fields[0].strip()  # Vendor ID (first field)
                revenue = float(fields[16].strip())  # Revenue (17th field)
                yield vendor_id, (1, revenue)  # Emit (vendor_id, (1 trip, revenue))
            except (ValueError, IndexError):
                pass  # Skip lines with invalid data

    def reducer_sum_trips_revenue(self, vendor_id, values):
        """Reducer to sum trips and revenue for each vendor."""
        total_trips = 0
        total_revenue = 0
        for trips, revenue in values:
            total_trips += trips
            total_revenue += revenue
        yield None, (total_trips, total_revenue, vendor_id)  # Emit (None, (total_trips, total_revenue, vendor_id))

    def reducer_find_max_revenue_vendor(self, _, values):
        """Reducer to find the vendor with the most trips and their total revenue."""
        max_trips = 0
        max_revenue = 0
        top_vendor = None

        for total_trips, total_revenue, vendor_id in values:
            if total_trips > max_trips:
                max_trips = total_trips
                max_revenue = total_revenue
                top_vendor = vendor_id

        yield top_vendor, {'Total Trips': max_trips, 'Total Revenue': max_revenue}

if __name__ == '__main__':
    VendorTripsRevenue.run()